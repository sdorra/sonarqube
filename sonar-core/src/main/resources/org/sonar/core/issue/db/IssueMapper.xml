<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mappei.dtd">

<mapper namespace="org.sonar.core.issue.db.IssueMapper">

  <sql id="issueColumns">
    i.id,
    i.kee as kee,
    i.component_id as componentId,
    i.root_component_id as rootComponentId,
    i.rule_id as ruleId,
    i.action_plan_key as actionPlanKey,
    i.severity as severity,
    i.manual_severity as manualSeverity,
    i.message as message,
    i.line as line,
    i.effort_to_fix as effortToFix,
    i.technical_debt as debt,
    i.status as status,
    i.resolution as resolution,
    i.checksum as checksum,
    i.reporter as reporter,
    i.assignee as assignee,
    i.author_login as authorLogin,
    i.issue_attributes as issueAttributes,
    i.issue_creation_date as issueCreationDate,
    i.issue_update_date as issueUpdateDate,
    i.issue_close_date as issueCloseDate,
    i.created_at as createdAt,
    i.updated_at as updatedAt,
    r.plugin_rule_key as ruleKey,
    r.plugin_name as ruleRepo,
    r.language as language,
    p.kee as componentKey,
    root.kee as rootComponentKey
  </sql>

  <sql id="sortColumn">
    <if test="query.sort() != null">,
      <choose>
        <when test="'SEVERITY'.equals(query.sort())">
          i.severity as severity
        </when>
        <when test="'STATUS'.equals(query.sort())">
          i.status as status
        </when>
        <when test="'ASSIGNEE'.equals(query.sort())">
          i.assignee as assignee
        </when>
        <when test="'CREATION_DATE'.equals(query.sort())">
          i.issue_creation_date as issueCreationDate
        </when>
        <when test="'UPDATE_DATE'.equals(query.sort())">
          i.issue_update_date as issueUpdateDate
        </when>
        <when test="'CLOSE_DATE'.equals(query.sort())">
          i.issue_close_date as issueCloseDate
        </when>
      </choose>
    </if>
  </sql>

  <insert id="insert" parameterType="Issue" useGeneratedKeys="false" keyProperty="id">
    INSERT INTO issues (kee, component_id, root_component_id, rule_id, action_plan_key, severity, manual_severity,
    message, line, effort_to_fix, technical_debt, status,
    resolution, checksum, reporter, assignee, author_login, issue_attributes, issue_creation_date, issue_update_date,
    issue_close_date, created_at, updated_at)
    VALUES (#{kee}, #{componentId}, #{rootComponentId}, #{ruleId}, #{actionPlanKey}, #{severity}, #{manualSeverity},
    #{message}, #{line}, #{effortToFix}, #{debt}, #{status},
    #{resolution}, #{checksum}, #{reporter}, #{assignee}, #{authorLogin}, #{issueAttributes}, #{issueCreationDate},
    #{issueUpdateDate}, #{issueCloseDate}, #{createdAt}, #{updatedAt})
  </insert>

  <!--
    IMPORTANT - invariant columns can't be updated. See IssueDto#toDtoForUpdate()
  -->
  <update id="update" parameterType="Issue">
    update issues set
    action_plan_key=#{actionPlanKey},
    severity=#{severity},
    manual_severity=#{manualSeverity},
    message=#{message},
    line=#{line},
    effort_to_fix=#{effortToFix},
    technical_debt=#{debt},
    status=#{status},
    resolution=#{resolution},
    checksum=#{checksum},
    reporter=#{reporter},
    assignee=#{assignee},
    author_login=#{authorLogin},
    root_component_id=#{rootComponentId},
    issue_attributes=#{issueAttributes},
    issue_creation_date=#{issueCreationDate},
    issue_update_date=#{issueUpdateDate},
    issue_close_date=#{issueCloseDate},
    updated_at=#{updatedAt}
    where kee = #{kee}
  </update>

  <!--
   IMPORTANT - invariant columns can't be updated. See IssueDto#toDtoForUpdate()
 -->
  <update id="updateIfBeforeSelectedDate" parameterType="Issue">
    update issues set
    action_plan_key=#{actionPlanKey},
    severity=#{severity},
    manual_severity=#{manualSeverity},
    message=#{message},
    line=#{line},
    effort_to_fix=#{effortToFix},
    technical_debt=#{debt},
    status=#{status},
    resolution=#{resolution},
    checksum=#{checksum},
    reporter=#{reporter},
    assignee=#{assignee},
    author_login=#{authorLogin},
    root_component_id=#{rootComponentId},
    issue_attributes=#{issueAttributes},
    issue_creation_date=#{issueCreationDate},
    issue_update_date=#{issueUpdateDate},
    issue_close_date=#{issueCloseDate},
    updated_at=#{updatedAt}
    where kee = #{kee} and updated_at &lt;= #{selectedAt}
  </update>

  <select id="selectByKey" parameterType="String" resultType="Issue">
    select
    <include refid="issueColumns"/>
    from issues i
    inner join rules r on r.id=i.rule_id
    inner join projects p on p.id=i.component_id
    inner join projects root on root.id=i.root_component_id
    where i.kee=#{kee}
  </select>

  <select id="selectAfterDate" resultType="Issue" timeout="10000"
          fetchSize="2000"
          statementType="PREPARED"
          resultSetType="FORWARD_ONLY">
    select <include refid="issueColumns"/>
    from issues i
    inner join rules r on r.id=i.rule_id
    inner join projects p on p.id=i.component_id
    inner join projects root on root.id=i.root_component_id
    <where>
    i.updated_at IS NULL or i.updated_at &gt;= #{date}
    <if test="project != null">
      and root.kee = #{project}
    </if>
    </where>
  </select>

  <select id="selectNonClosedIssuesByModule" parameterType="int" resultType="Issue">
    select
    i.id,
    i.kee as kee,
    i.component_id as componentId,
    i.root_component_id as rootComponentId,
    i.rule_id as ruleId,
    i.action_plan_key as actionPlanKey,
    i.severity as severity,
    i.manual_severity as manualSeverity,
    i.message as message,
    i.line as line,
    i.effort_to_fix as effortToFix,
    i.technical_debt as debt,
    i.status as status,
    i.resolution as resolution,
    i.checksum as checksum,
    i.reporter as reporter,
    i.assignee as assignee,
    i.author_login as authorLogin,
    i.issue_attributes as issueAttributes,
    i.issue_creation_date as issueCreationDate,
    i.issue_update_date as issueUpdateDate,
    i.issue_close_date as issueCloseDate,
    i.created_at as createdAt,
    i.updated_at as updatedAt,
    r.plugin_rule_key as ruleKey,
    r.plugin_name as ruleRepo,
    p.kee as componentKey,
    root.kee as rootComponentKey
    from issues i
    inner join (select p.id,p.kee from projects p where (p.root_id=#{id} and p.qualifier &lt;&gt; 'BRC') or
    (p.id=#{id})) p on p.id=i.component_id
    inner join rules r on r.id=i.rule_id
    left outer join projects root on root.id=i.root_component_id
    where i.status &lt;&gt; 'CLOSED'
  </select>

  <select id="selectByKeys" parameterType="map" resultType="Issue">
    select
    <include refid="issueColumns"/>
    from issues i
    inner join rules r on r.id=i.rule_id
    inner join projects p on p.id=i.component_id
    inner join projects root on root.id=i.root_component_id
    where i.kee in
    <foreach collection="list" open="(" close=")" item="key" separator=",">
      #{key}
    </foreach>
  </select>

  <select id="selectByActionPlan" parameterType="map" resultType="Issue">
    select
    <include refid="issueColumns"/>
    from issues i
    inner join rules r on r.id=i.rule_id
    inner join projects p on p.id=i.component_id
    inner join projects root on root.id=i.root_component_id
    <where>
      and i.action_plan_key=#{action_plan}
    </where>
  </select>

  <select id="findRulesByComponent" parameterType="String" resultType="Rule">
    SELECT
    <include refid="org.sonar.core.rule.RuleMapper.selectColumns"/>
    FROM issues i
    INNER JOIN projects p on p.id=i.component_id
    INNER JOIN rules r on r.id=i.rule_id
    WHERE
    p.kee=#{componentKey}
    AND i.resolution IS NULL
    <if test="createdAt != null">
      AND i.issue_creation_date &gt;= #{createdAt}
    </if>
  </select>

  <select id="findSeveritiesByComponent" parameterType="String" resultType="String">
    SELECT i.severity
    FROM issues i
    INNER JOIN projects on projects.id=i.component_id
    INNER JOIN rules on rules.id=i.rule_id
    WHERE
    projects.kee=#{componentKey}
    AND i.resolution IS NULL
    <if test="createdAt != null">
      AND i.issue_creation_date &gt;= #{createdAt}
    </if>
  </select>

</mapper>

